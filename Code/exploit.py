import os
import sys
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from binascii import hexlify, unhexlify
from cryptography.hazmat.backends import default_backend

# KEYLEN = 16

def gen(): 
    offset = 3 # Hotfix to make Crypto blazing fast!!
    key = bytearray(b'\x00'*(16-offset)) 
    key.extend(os.urandom(offset))
    return bytes(key)

def enc(k, m, nonce):
    cipher = Cipher(algorithms.AES(k), modes.CTR(nonce),backend=default_backend())
    encryptor = cipher.encryptor()
    cph = b""
    cph += encryptor.update(m)
    cph += encryptor.finalize()
    return cph

def dec(k, c, nonce):
    cipher = Cipher(algorithms.AES(k), modes.CTR(nonce),backend=default_backend())
    decryptor = cipher.decryptor()
    msg = b""
    msg += decryptor.update(c)
    msg += decryptor.finalize()
    return msg

ciphertext="c713e050a74567776771ad315fa8d5ffe3be51d0a5894e957c8bf08951cc41e24e1f70f9d8d80e"
nonce="e5760f2e13728c26acb9e842c50aafbf"

def keyGen(byte1,byte2,byte3):
    offset=3	
    key = bytearray(b'\x00'*(16-offset))
    combination = bytes([byte1, byte2, byte3])
    return bytes(key + combination)


for byte1 in range(256):
    for byte2 in range(256):
        for byte3 in range(256):
            k = keyGen(byte1, byte2, byte3)
            res = dec(k, unhexlify(ciphertext), unhexlify(nonce))
            print(res)
